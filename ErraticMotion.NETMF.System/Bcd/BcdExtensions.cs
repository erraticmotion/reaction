//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System.Bcd 
{
    /// <summary>
    /// <see cref="Byte"/> extensions
    /// </summary>
    internal static class BcdExtensions 
	{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public static byte FromBcd(this byte item) 
		{
		    // This is a generated member, do not change directly but alter the BcdExtensions.tt text template file
            switch (item) 
			{
				case 0x0:
					return 0; // 0x00
				case 0x1:
					return 1; // 0x01
				case 0x2:
					return 2; // 0x02
				case 0x3:
					return 3; // 0x03
				case 0x4:
					return 4; // 0x04
				case 0x5:
					return 5; // 0x05
				case 0x6:
					return 6; // 0x06
				case 0x7:
					return 7; // 0x07
				case 0x8:
					return 8; // 0x08
				case 0x9:
					return 9; // 0x09
				case 0x10:
					return 10; // 0x0A
				case 0x11:
					return 11; // 0x0B
				case 0x12:
					return 12; // 0x0C
				case 0x13:
					return 13; // 0x0D
				case 0x14:
					return 14; // 0x0E
				case 0x15:
					return 15; // 0x0F
				case 0x16:
					return 16; // 0x10
				case 0x17:
					return 17; // 0x11
				case 0x18:
					return 18; // 0x12
				case 0x19:
					return 19; // 0x13
				case 0x20:
					return 20; // 0x14
				case 0x21:
					return 21; // 0x15
				case 0x22:
					return 22; // 0x16
				case 0x23:
					return 23; // 0x17
				case 0x24:
					return 24; // 0x18
				case 0x25:
					return 25; // 0x19
				case 0x26:
					return 26; // 0x1A
				case 0x27:
					return 27; // 0x1B
				case 0x28:
					return 28; // 0x1C
				case 0x29:
					return 29; // 0x1D
				case 0x30:
					return 30; // 0x1E
				case 0x31:
					return 31; // 0x1F
				case 0x32:
					return 32; // 0x20
				case 0x33:
					return 33; // 0x21
				case 0x34:
					return 34; // 0x22
				case 0x35:
					return 35; // 0x23
				case 0x36:
					return 36; // 0x24
				case 0x37:
					return 37; // 0x25
				case 0x38:
					return 38; // 0x26
				case 0x39:
					return 39; // 0x27
				case 0x40:
					return 40; // 0x28
				case 0x41:
					return 41; // 0x29
				case 0x42:
					return 42; // 0x2A
				case 0x43:
					return 43; // 0x2B
				case 0x44:
					return 44; // 0x2C
				case 0x45:
					return 45; // 0x2D
				case 0x46:
					return 46; // 0x2E
				case 0x47:
					return 47; // 0x2F
				case 0x48:
					return 48; // 0x30
				case 0x49:
					return 49; // 0x31
				case 0x50:
					return 50; // 0x32
				case 0x51:
					return 51; // 0x33
				case 0x52:
					return 52; // 0x34
				case 0x53:
					return 53; // 0x35
				case 0x54:
					return 54; // 0x36
				case 0x55:
					return 55; // 0x37
				case 0x56:
					return 56; // 0x38
				case 0x57:
					return 57; // 0x39
				case 0x58:
					return 58; // 0x3A
				case 0x59:
					return 59; // 0x3B
				case 0x60:
					return 60; // 0x3C
				case 0x61:
					return 61; // 0x3D
				case 0x62:
					return 62; // 0x3E
				case 0x63:
					return 63; // 0x3F
				case 0x64:
					return 64; // 0x40
				case 0x65:
					return 65; // 0x41
				case 0x66:
					return 66; // 0x42
				case 0x67:
					return 67; // 0x43
				case 0x68:
					return 68; // 0x44
				case 0x69:
					return 69; // 0x45
				case 0x70:
					return 70; // 0x46
				case 0x71:
					return 71; // 0x47
				case 0x72:
					return 72; // 0x48
				case 0x73:
					return 73; // 0x49
				case 0x74:
					return 74; // 0x4A
				case 0x75:
					return 75; // 0x4B
				case 0x76:
					return 76; // 0x4C
				case 0x77:
					return 77; // 0x4D
				case 0x78:
					return 78; // 0x4E
				case 0x79:
					return 79; // 0x4F
				case 0x80:
					return 80; // 0x50
				case 0x81:
					return 81; // 0x51
				case 0x82:
					return 82; // 0x52
				case 0x83:
					return 83; // 0x53
				case 0x84:
					return 84; // 0x54
				case 0x85:
					return 85; // 0x55
				case 0x86:
					return 86; // 0x56
				case 0x87:
					return 87; // 0x57
				case 0x88:
					return 88; // 0x58
				case 0x89:
					return 89; // 0x59
				case 0x90:
					return 90; // 0x5A
				case 0x91:
					return 91; // 0x5B
				case 0x92:
					return 92; // 0x5C
				case 0x93:
					return 93; // 0x5D
				case 0x94:
					return 94; // 0x5E
				case 0x95:
					return 95; // 0x5F
				case 0x96:
					return 96; // 0x60
				case 0x97:
					return 97; // 0x61
				case 0x98:
					return 98; // 0x62
				case 0x99:
					return 99; // 0x63
                default:
                    throw new ArgumentOutOfRangeException("item", "item value could not be converted to a byte.");
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public static byte FromBcdAcceptTrailingF(this byte item)
        {
		    // This is a generated member, do not change directly but alter the BcdExtensions.tt text template file
            switch (item) 
			{
				case 0x0F:
					return 0; // 0x00
				case 0x1F:
					return 1; // 0x01
				case 0x2F:
					return 2; // 0x02
				case 0x3F:
					return 3; // 0x03
				case 0x4F:
					return 4; // 0x04
				case 0x5F:
					return 5; // 0x05
				case 0x6F:
					return 6; // 0x06
				case 0x7F:
					return 7; // 0x07
				case 0x8F:
					return 8; // 0x08
				case 0x9F:
					return 9; // 0x09
                default:
					return FromBcd(item);
            }
        }
    }
}
